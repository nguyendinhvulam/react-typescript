@mixin placeholder($color) {
  &::placeholder {
    color: $color;
  }

  &::-moz-placeholder {
    color: $color;
    opacity: 1;
  }
}

@mixin button-reset() {
  appearance: none;
  box-shadow: none;
  border-radius: 0;
  border: none;
  cursor: pointer;
  background-color: transparent;
  outline: none;
  margin: 0;
  padding: 0;
}

@mixin input-reset() {
  border: 0;
  background-color: transparent;
  outline: none;
  box-shadow: none;
  border-radius: 0;
}

// SVG
@mixin svg-icon-color($color, $important: false) {
  svg {
    [fill]:not(.permanent):not(g) {
      transition: fill 0.3s ease;
      fill: $color valueif($important, !important, null);
    }

    &:hover {
      [fill]:not(.permanent):not(g) {
        transition: fill 0.3s ease;
      }
    }
  }
}

@mixin svg-icon-transition() {
  svg {
    [fill]:not(g) {
      transition: fill 0.3s ease;
    }
  }
}

@mixin svg-icon-size($size, $important: false) {
  svg {
    height: $size valueif($important, !important, null);
    width: $size valueif($important, !important, null);
  }
}

//
// Button Mixins
//
@mixin button-custom-variant(
  $color,
  $icon-color,
  $border-color,
  $bg-color,
  $color-active,
  $icon-color-active,
  $border-color-active,
  $bg-color-active
) {
  @if ($color != null) {
    color: $color;
  }

  @if ($icon-color != null) {
    i {
      color: $icon-color;
    }

    .svg-icon {
      @include svg-icon-color($icon-color);
    }

    &.dropdown-toggle:after {
      color: $icon-color;
    }
  }

  @if ($border-color != null) {
    border-color: $border-color;
  }

  @if ($bg-color != null) {
    background-color: $bg-color;
  }

  .btn-check:checked + &,
  .btn-check:active + &,
  &:focus:not(.btn-active),
  &:hover:not(.btn-active),
  &:active:not(.btn-active),
  &.active,
  &.show,
  .show > & {
    @if ($color-active != null) {
      color: $color-active;
    }

    @if ($icon-color-active != null) {
      i {
        color: $icon-color-active;
      }

      .svg-icon {
        @include svg-icon-color($icon-color-active);
      }

      &.dropdown-toggle:after {
        color: $icon-color-active;
      }
    }

    @if ($border-color-active != null) {
      border-color: $border-color-active;
    }

    @if ($bg-color-active != null) {
      background-color: $bg-color-active !important;
    }
  }
}

//
// Scroll Mixins
//
@mixin scrollbar-color($color, $hover-color: null) {
  // Firefox
  scrollbar-color: $color transparent;

  // Webkit
  &::-webkit-scrollbar-thumb {
    background-color: $color;
  }

  @if ($hover-color != null) {
    // Hover state
    &:hover {
      // Firefox
      scrollbar-color: $hover-color transparent;

      // Webkit
      &::-webkit-scrollbar-thumb {
        background-color: $hover-color;
      }
    }
  }
}

// Mixin to prefix several properties at once
// @author Hugo Giraudel
// @param {Map} $declarations - Declarations to prefix
// @param {List} $prefixes (()) - List of prefixes to print
@mixin prefix($declarations, $prefixes: ()) {
  @each $property, $value in $declarations {
    @each $prefix in $prefixes {
      #{'-' + $prefix + '-' + $property}: $value;
    }
    #{$property}: $value;
  }
}

// Gives a card depth effect.
// @param {Number} $depth - depth level (between 1 and 5)
// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
// @requires {function} top-shadow
// @requires {function} bottom-shadow
@mixin depth($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);
  }
}

// Computes a top-shadow for a card effect.
// @param {Number} $depth - depth level
// @return {List}

@function top-shadow($depth) {
  $primary-offset: nth($shadowOffsetsTop, $depth) * 1px;
  $blur: nth($shadowBlursTop, $depth) * 4px;
  $color: rgba(black, nth($shadowOpacitiesTop, $depth));

  @return 0 $primary-offset $blur $color;
}

// Computes a bottom-shadow for a card effect.
// @param {Number} $depth - depth level
// @return {List}
@function bottom-shadow($depth) {
  $primary-offset: nth($shadowOffsetsBottom, $depth) * 1px;
  $blur: nth($shadowBlursBottom, $depth) * 5px;
  $color: rgba(black, nth($shadowOpacitiesBottom, $depth));
  @return 0 $primary-offset $blur $color;
}

@mixin clearfix() {
  &::after {
    display: block;
    content: "";
    clear: both;
  }
}

//Responsive Breakpoints
$breakpoints: (
  xxs: 420px,
  xs: 576px,
  sm: 768px,
  md: 992px,
  lg: 1200px,
  xl: 1440px,
);

@mixin respond-above($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint); // Write the media query.
    @media (min-width: ($breakpoint-value - 1)) {
      @content;
    }
    // If the breakpoint doesn't exist in the map.
  } @else {
    @warn "Invalid breakpoint: #{$breakpoint}.";
  }
}

@mixin respond-below($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint); // Write the media query.
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
    // If the breakpoint doesn't exist in the map.
  } @else {
    @warn "Invalid breakpoint: #{$breakpoint}.";
  }
}

@function encodecolor($string) {
  @if type-of($string) == "color" {
    $hex: str-slice(ie-hex-str($string), 4);
    $string: unquote("#{$hex}");
  }
  $string: "%23" + $string;
  @return $string;
}

@function hexToRGB($hex) {
  @return red($hex), green($hex), blue($hex);
}
